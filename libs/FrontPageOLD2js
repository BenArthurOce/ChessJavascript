
import {Game, GameTest} from "./Game.js";
import StaticOpeningDatabase from "./StaticOpeningDatabase.js";
import dropdownFavourites from './DropdownFavourites.js';
import dropdownECO from "./DropdownECO.js";


class FrontPage {
    #className;
    #mainGameBoard;
    #sideGameBoards;
    #elements;
    #allTwoMoveContinuations;
    #allThreeMoveContinuations;
    #openings
    constructor() {
        this.#className = "Board";
        this.#mainGameBoard = null;
        this.#sideGameBoards = [];
        // this.#elements = {
        //      btnQuery: document.body.querySelectorAll(`button`)[0]
        //     ,btnClear: document.body.querySelectorAll(`button`)[1]
        //     ,input1:  document.body.querySelectorAll(`select`)[0]
        //     ,input2:  document.body.querySelectorAll(`input`)[0]
        //     ,input3:  document.body.querySelectorAll(`input`)[1]
        //     ,mainBoard: document.body.querySelector(`#main-board-container`)
        //     ,sideBoardContainer: document.body.querySelector(`#side-board-containers`)
        // };
        this.#allTwoMoveContinuations = []
        this.#allThreeMoveContinuations = []
        this.#openings = null
        // this.initpage2()


    };
    get className() {
        return this.#className;
    };
    set className(value) {
        this.#className = value;
    };
    get mainGameBoard() {
        return this.#mainGameBoard;
    };
    set mainGameBoard(value) {
        this.#mainGameBoard = value;
    };
    get sideGameBoards() {
        return this.#sideGameBoards;
    };
    set sideGameBoards(value) {
        this.#sideGameBoards = value;
    };
    get elements() {
        return this.#elements;
    };
    get allTwoMoveContinuations() {
        return this.#allTwoMoveContinuations;
    };
    set allTwoMoveContinuations(value) {
        this.#allTwoMoveContinuations = value;
    };
    get allThreeMoveContinuations() {
        return this.#allThreeMoveContinuations;
    };
    set allThreeMoveContinuations(value) {
        this.#allThreeMoveContinuations = value;
    };
    get openings() {
        return this.#openings;
    };
    set openings(value) {
        this.#openings = value;
    };




    createMainBoard() {
        const parentEL = document.body.querySelector("#main-board-container");
        this.mainGameBoard = new Game(null, 0, parentEL);
        this.mainGameBoard.resetGame()
    }


    updateMainBoard(information) {
        // console.log(this.openings)
        this.clearMainBoard()
        const parentEL = document.body.querySelector("#main-board-container");
        // this.mainGameBoard = new Game(null, 0, parentEL);
        this.mainGameBoard = null
        this.mainGameBoard = new Game(information, 0, parentEL);
        this.mainGameBoard.initGame();
    };


    timeToCheckSomeOpenings() {
        console.log("timeToCheckSomeOpenings")
        const parentEL = document.body.querySelector("#side-board-containers");
        const names = Object.values(this.openings).map(obj => obj);

        // names.forEach(info => {
        //     // console.log(info)
        //     const newGame = new Game(info, 0, parentEL)
        //     newGame.initGame();
        // });

        const errors = [];
        const errors2 = []

        function testObject(obj) {
            // console.log(obj)
            try {
                // Perform your tests here
                const newGame = new Game(obj, 0, parentEL)
                newGame.initGame();
                // if (typeof obj.value !== 'number') {
                //     throw new Error(`Invalid value for ${obj.name}`);
                // }
                // Additional tests can be added here
        
            } catch (error) {
                // Store errors
                errors.push(error.message);
                errors2.push(obj.information)
            }
        }

        names.forEach(testObject);
        console.log(errors)
        console.log(errors2)

    };


    /**
     * Initializes the front page.
     */
     async initPage() {

        //Dictionary of all openings
        this.openings = await this.queryDatabase("EVERYTHING", "", null);
        // this.timeToCheckSomeOpenings()
        // console.log(this.openings)
        
        console.log(this.openings)
        

        // // Event Listener for rendering boards to page
        // this.elements.btnQuery.addEventListener('click', () => {
        //     this.clearAllBoards();
        //     //Need something that queries the database first
        //     this.renderBoardsToPage();
        // });

        // // Event Listener for clearing boards
        // this.elements.btnClear.addEventListener('click', () => {
        //     this.clearAllBoards();
        // });

        // Main empty chessboard
        // this.createMainBoard()




        //////////////////////////////////////////////////////////////

        // const searchInput = document.getElementById('searchInput');

        // searchInput.addEventListener('input', () => {
        //     this.performSearch()
        // });


        // The textbox that automatically generates chessboards when words are typed into it
        document.querySelector(`#searchInput`).addEventListener('input', this.performSearch.bind(this));

    };


     performSearch(event) {
        console.log("performSearch")
        // this.mainGameBoard.resetGame()
        const searchInput = document.getElementById('searchInput');
        
        
        // Get the query from the search input
        const query = searchInput.value.toLowerCase().trim();
        // console.log(query);
        // console.log(this.openings)

        // Array to store matching results
        const results = [];

        // Iterate through the openings and check if the query matches the opening key or name
        for (const key in this.openings) {
            if (this.openings.hasOwnProperty(key)) {
                const opening = this.openings[key];
                if (key.toLowerCase().includes(query) || opening.NAME.toLowerCase().includes(query)) {
                    results.push(opening);
                }
            }
        }

        console.log(results)
        // Display the matching results
        this.displayResults(results);

    };

    displayResults(results) {
        const resultsContainer = document.getElementById('results');
        // console.log("displayResults")
        resultsContainer.innerHTML = '';
        if (results.length === 0) {
            resultsContainer.innerHTML = '<li>No results found</li>';
            return;
        }
        results.forEach(result => {
            const li = document.createElement('li');
            li.textContent = `${result.PGN}: ${result.NAME}`;
            resultsContainer.appendChild(li);
        });

        // Generate chessboards from the RESULTS
        this.clearAllBoards();
        this.loadChessBoards(results);
    }
    
    /**
     * Renders Chessboards to DOM
     */
     renderBoardsToPage() {
        const searchCategory = this.elements.input1.value;
        const searchTerm = this.elements.input2.value;
        const moveNumber = this.elements.input3.value;

        // After reading the database, returns the results into a variable
        const databaseResults =  this.queryDatabase(searchCategory, searchTerm, moveNumber);
        // console.log(databaseResults)

        // Takes the database results and creates new Games based on the information
        this.loadChessBoards(databaseResults);
    };


    /**
     * Queries the database.
     * @param {string} searchCategory The search category.
     * @param {string} searchTerm The search term.
     * @param {string} moveNumber The move number.
     * @returns {Promise<Object>} The filtered openings.
     */
    queryDatabase(searchCategory, searchTerm, moveNumber) {
        try {
            return StaticOpeningDatabase.filterOpeningDict(searchCategory, searchTerm, moveNumber);
        } catch (error) {
            console.error("An error occurred:", error);
            return null;
        }
    };


    /**
     * Loads chess boards.
     * @param {Object} openings The openings to load.
     */
     loadChessBoards(openings) {
        const parentEL = document.body.querySelector("#side-board-containers");
        let index = 1;
        for (const key in openings) {
            if (openings.hasOwnProperty(key)) {
                const opening = openings[key];
                const newGame = new Game(opening, index, parentEL);
                newGame.initGame();


    
                // Use arrow function to maintain "this" context and bind index value
                document.querySelector(`#chessboard-container${index}`).addEventListener('click', ((index) => {
                    return (event) => {
                        this.handleBoardClick(event, index-1);
                    };
                })(index));

                this.sideGameBoards.push({ index, game: newGame });
    
                index++;
            }
        }
    }
    
    handleBoardClick(event, index) {
        const boardClicked = this.sideGameBoards[index].game;
        this.updateMainBoard(boardClicked.information)
    };
    
    
    

    clearMainBoard() {
        const constMainboard = document.body.querySelector("#main-board-container");
        while (constMainboard.firstChild) {
            constMainboard.removeChild(constMainboard.firstChild);
            // this.sideGameBoards.pop();
        }
    }

    /**
     * Clears all boards.
     */
    clearAllBoards() {
        const constSideboard = document.body.querySelector("#side-board-containers");
        while (constSideboard.firstChild) {
            constSideboard.removeChild(constSideboard.firstChild);
            this.sideGameBoards.pop();
        }
    };

};

export default FrontPage;